/*
 * Leumi calculator task
 *
 * This is an example of using OAuth2 Password Flow in a specification to describe security to your API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Identity.Web.Resource;
using Leumi.Calc.Application.Services;
using Leumi.Calc.Application.Services.Dtos;

namespace Leumi.Calc.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("leumi/calc")]
    [Authorize]
    public class CalculatorApiController : ControllerBase
    { 
        private readonly ICalculatorService calculatorService;
        public CalculatorApiController(ICalculatorService calculatorService)
        {
            this.calculatorService = calculatorService;

        }
        /// <summary>
        /// divive valueA by valueB
        /// </summary>
        /// <remarks>executes the operation substraction</remarks>
        /// <param name="body">values to execute the operation</param>
        /// <response code="200">operation result</response>
        /// <response code="400">invalid input, object invalid</response>
        [HttpPost]
        [Route("/divide")]
        [SwaggerOperation("divide")]
        [SwaggerResponse(statusCode: 200, type: typeof(double?), description: "operation result")]
        public virtual IActionResult Divide([FromBody]CalcValues body)
        {
            return Ok(calculatorService.Divide(body));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(double?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<double?>(exampleJson)
                        : default(double?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// mutiply valueA by valueB
        /// </summary>
        /// <remarks>executes the operation substraction</remarks>
        /// <param name="body">values to execute the operation</param>
        /// <response code="200">operation result</response>
        /// <response code="400">invalid input, object invalid</response>
        [HttpPost]
        [Route("/multiply")]        
        [SwaggerOperation("multiply")]
        [SwaggerResponse(statusCode: 200, type: typeof(double?), description: "operation result")]
        public virtual IActionResult Multiply([FromBody]CalcValues body)
        {
            return Ok(calculatorService.Multiply(body));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(double?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<double?>(exampleJson)
                        : default(double?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// substract valueA from valueB
        /// </summary>
        /// <remarks>values to execute the operation</remarks>
        
        /// <param name="body">values to execute the operation</param>
        /// <response code="200">operation result</response>
        /// <response code="400">invalid input, object invalid</response>
        [HttpPost]
        [Route("/substraction")]
       
        [SwaggerOperation("Substraction")]
        [SwaggerResponse(statusCode: 200, type: typeof(double?), description: "operation result")]
        public virtual IActionResult Substraction([FromBody]CalcValues body)
        {
            return Ok(calculatorService.Substract(body));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(double?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<double?>(exampleJson)
                        : default(double?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sum valueA wity valueB
        /// </summary>
        /// <remarks>executes the operation sum</remarks>
        /// <param name="body">values to execute the operation</param>
        /// <response code="200">operation result</response>
        /// <response code="400">invalid input, object invalid</response>
        [HttpPost]
        [Route("/sum")]
        [SwaggerOperation("sum")]
        [SwaggerResponse(statusCode: 200, type: typeof(double?), description: "operation result")]
        public virtual IActionResult Sum([FromBody]CalcValues body)
        {
            return Ok(calculatorService.Sum(body));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(double?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<double?>(exampleJson)
                        : default(double?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
